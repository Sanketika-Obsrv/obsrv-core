name: Obsrv Core service build and deploy workflow
run-name: Workflow run for ${{ github.ref }}
on:
  push:
    tags:
      - '*'

jobs:
  check-tag:
    runs-on: ubuntu-latest
    outputs:
      ALLOWED_TAG: ${{ steps.tag-checker.outputs.TRIGGER_ALLOWED }}
    steps:
      - name: Check if tag is one in list of current releases
        id: tag-checker
        run: |
          (echo -n TRIGGER_ALLOWED= && echo 'print("${{ github.ref_name }}".split("_")[0]
          in ${{ vars.CURRENT_RELEASE }})' | python3) >> "$GITHUB_OUTPUT"

  docker-build:
    needs: check-tag
    if: needs.check-tag.outputs.ALLOWED_TAG ==  'True'
    runs-on: ubuntu-latest
    steps:
      - name: Login to docker hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build docker image and push
        uses: docker/build-push-action@v4
        with:
          platforms: linux/amd64
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/obsrv-core:${{ github.ref_name }}

  aws-deploy:
    needs: [check-tag, docker-build]
    if: needs.check-tag.outputs.ALLOWED_TAG ==  'True' && vars.CLOUD_PROVIDER == 'aws'
    runs-on: ubuntu-latest
    environment: aws-dev
    steps:
      - name: Clone the terraform deployment repo
        uses: actions/checkout@v3
        with:
          repository: ${{ vars.DEPLOY_REPO }}
          path: deploy
          ref: ${{ vars.DEPLOY_REPO_REF }}

      - name: Run terraform init and apply
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          AWS_TERRAFORM_BACKEND_BUCKET_NAME: ${{ vars.AWS_TERRAFORM_BACKEND_BUCKET_NAME }}
          AWS_TERRAFORM_BACKEND_BUCKET_REGION: ${{ vars.AWS_TERRAFORM_BACKEND_BUCKET_REGION }}
        run: |
          cd deploy/terraform/aws
          terragrunt init
          terragrunt apply -auto-approve -replace=module.flink.helm_release.flink \
          -var flink_container_registry=${{ secrets.DOCKERHUB_USERNAME }} \
          -var flink_image_tag=${{ github.ref_name }}

  azure-deploy:
    needs: [check-tag, docker-build]
    if: needs.check-tag.outputs.ALLOWED_TAG ==  'True' && vars.CLOUD_PROVIDER == 'azure'
    runs-on: ubuntu-latest
    steps:
      - name: Clone the terraform deployment repo
        uses: actions/checkout@v3
        with:
          repository: ${{ vars.DEPLOY_REPO }}
          path: deploy
          ref: ${{ vars.DEPLOY_REPO_REF }}

      - name: Run terraform init and apply
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        run: |
          cd deploy/terraform/azure
          terragrunt init
          terragrunt apply -auto-approve -replace=module.flink.helm_release.flink \
          -var flink_container_registry=${{ secrets.DOCKERHUB_USERNAME }} \
          -var flink_image_tag=${{ github.ref_name }}



# name: Obsrv Core service build and deploy workflow
# run-name: Workflow run for ${{ github.ref }}
# on:
#   push:
#     tags:
#       - '*'

# jobs:
#   check-tag:
#     runs-on: ubuntu-latest
#     outputs:
#       ALLOWED_TAG: ${{ steps.tag-checker.outputs.TRIGGER_ALLOWED }}
#     steps:
#       - name: Check if tag is one in list of current releases
#         id: tag-checker
#         run: |
#           (echo -n TRIGGER_ALLOWED= && echo 'print("${{ github.ref_name }}".split("_")[0]
#           in ${{ vars.CURRENT_RELEASE }})' | python3) >> "$GITHUB_OUTPUT"

#   docker-build:
#     needs: check-tag
#     if: needs.check-tag.outputs.ALLOWED_TAG ==  'True'
#     runs-on: ubuntu-latest
#     steps:
#       - name: Login to docker hub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}

#       - name: Build docker image and push
#         uses: docker/build-push-action@v4
#         with:
#           platforms: linux/amd64
#           push: true
#           tags: ${{ secrets.DOCKERHUB_USERNAME }}/obsrv-core:${{ github.ref_name }}

#   aws-deploy:
#     needs: [check-tag, docker-build]
#     if: needs.check-tag.outputs.ALLOWED_TAG ==  'True'
#     runs-on: ubuntu-latest
#     environment: aws-dev
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2
#       - name: Setup Terragrunt
#         uses: autero1/action-terragrunt@v1.1.0
#         with:
#           terragrunt_version: v0.45.8
#       - name: Terragrunt installation
#         run: terragrunt --version
      
#       - name: Install Terrahelp
#         run: |
#           curl -OL https://github.com/opencredo/terrahelp/releases/download/v0.4.3/terrahelp-linux-amd64
#           sudo mv terrahelp-linux-amd64 /usr/bin/terrahelp
#           chmod +x /usr/bin/terrahelp
#           terrahelp -v
#       - name: Clone the terraform deployment repo
#         uses: actions/checkout@v3
#         with:
#           repository: ${{ vars.DEPLOY_REPO }}
#           # repository: Sanketika-Obsrv/obsrv-automation
#           path: deploy
#           ref: ${{ vars.DEPLOY_REPO_REF }}
          
#       - name: Fetch and update kubeconfig file
#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           AWS_REGION: ${{ vars.AWS_REGION }}
#         run: |
#           ls
#           aws eks --region us-east-2 update-kubeconfig --name obsrv-dev-eks 
#       - name: Run terraform init and apply
#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           AWS_REGION: ${{ vars.AWS_REGION }}
#           AWS_TERRAFORM_BACKEND_BUCKET_NAME: ${{ vars.AWS_TERRAFORM_BACKEND_BUCKET_NAME }}
#           AWS_TERRAFORM_BACKEND_BUCKET_REGION: ${{ vars.AWS_TERRAFORM_BACKEND_BUCKET_REGION }}
#           KUBE_CONFIG_PATH: ~/.kube/config
#         run: |
#           cd deploy/terraform/aws
#           terragrunt init
#           terragrunt apply  -replace=module.flink.helm_release.flink \
#           -var flink_container_registry=${{ secrets.DOCKERHUB_USERNAME }} \
#           -var flink_image_tag=${{ github.ref_name }}


#   # azure-deploy:
#   #   needs: [check-tag, docker-build]
#   #   if: needs.check-tag.outputs.ALLOWED_TAG ==  'True' && vars.CLOUD_PROVIDER == 'azure'
#   #   runs-on: ubuntu-latest
#   #   steps:
#   #     - name: Clone the terraform deployment repo
#   #       uses: actions/checkout@v3
#   #       with:
#   #         repository: ${{ vars.DEPLOY_REPO }}
#   #         path: deploy
#   #         ref: ${{ vars.DEPLOY_REPO_REF }}

#   #     - name: Run terraform init and apply
#   #       env:
#   #         ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
#   #         ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
#   #         ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
#   #         ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
#   #       run: |
#   #         cd deploy/terraform/azure
#   #         terragrunt init
#   #         terragrunt apply -auto-approve -replace=module.flink.helm_release.flink \
#   #         -var flink_container_registry=${{ secrets.DOCKERHUB_USERNAME }} \
#   #         -var flink_image_tag=${{ github.ref_name }}